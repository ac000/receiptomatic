Overview
========

receiptomatic has been built and run under RHEL 5 (x86_64) and Fedora 14 (i386)

It consists of two parts

  1) receiver/receiptomatic

     This program takes an email message and looks for image attachments
     which it extracts and stores.

  2) www/receiptomatic-www

     This is the FastCGI web application.


Requirements
============

To build you will need at least the following (older versions may work)

For receiptomatic

    glib2{-devel}-2.12.3
    gmime{-devel}-2.6.20
    GraphicsMagick{-devel}-1.3.7
    mhash{-devel}-0.9.9
    mysql{-devel}-5.0.77
    bzip2{-devel}-1.0.3
    lcms{-devel}-1.18
    libICE{-devel}-1.0.1
    libSM{-devel}-1.0.1

For receiptomatic-www

     fcgi{-devel}-2.4.0
     glib2{-devel}-2.12.3
     gmime{-devel}-2.6.20
     mhash{-devel}-0.9.9
     file-4.17-15
     mysql{-devel}-5.0.77
     tokyocabinet{-devel}-1.4.9

and the otl branch of libctemplate from

     git://github.com/opentechlabs/libctemplate.git


Build
=====

Something like this

    $ git clone git://github.com/opentechlabs/receiptomatic.git
    $ git clone git://github.com/opentechlabs/libctemplate.git

libctemplate

    $ cd libctemplate
    $ git checkout -b otl origin/otl
    $ make
    $ ln -s libctemplate-fcgx.so.1.4.0 libctemplate-fcgx.so
    $ ln -s libctemplate-fcgx.so.1.4.0 libctemplate-fcgx.so.1

receiptomatic-www

    $ cd www
    $ make

receiptomatic

    $ cd ../receiver
    $ make


Install
=======

    Create a database (and user) for receiptomatic using the schema from
    db/receiptomatic.sql

    $ mysql -u USER -p receiptomatic < db/receiptomatic.sql

    You'll also need to create at least one user (with ADMIN capabilities)
    within this database by adding them to the passwd table which is comprised
    of the following

    uid          - Unique integer to identify users.
    username     - Username that user uses to log into the system.
    password     - The users password having been run through crypt().
    name         - Full name of the user.
    capabilities - An integer representing the users capabilities. In the app
		   this is represented as a bitmask with the following values

	USER		  0 - A normal user.

	APPROVER	  1 - The user is an APPROVER, this by itself doesn't
			      really grant any capabiltities and needs at least
			      one of the following as well.
	APPROVER_SELF	  2 - The user can approve their own receipts.
	APPROVER_CASH	  4 - The user can approve cash receipts.
	APPROVER_CARD	  8 - The user can approve card receipts.
	APPROVER_CHEQUE  16 - The user can approve cheque receipts.
	ADMIN		128 - The user is an administrator for the site.

	So a plain user would just have a capability of 0. A user that can
	approve cash and card receipts but not cheques or their own would
	have a capability of 13 (APPROVER + APPROVER_CASH + APPROVER_CARD).

	A user with full capabilities would have a value of 159.

    enabled	- A flag to indicate if the account is enabled. 0 no, 1 yes.
    activated	- A flag to indicate if the account if activated. 0 no, 1 yes.
    d_reason	- A reason why the account has been disabled.

    - Give each user a UID. I'd suggest to start at 1000.
    - Create a username, this should be their email address. This is what the
      email receiver will use to identify them.
    - Create a password entry. You can use the tools/passcrypt utility to do
      this, e.g

	$ tools/passcrypt -l 512 mypassword

      That will generate a crypt'd password using the SHA-512 algorithm.

    - Set their name.
    - Set their capability, e.g 128 for an admin only, 159 for everything.
    - Set the enabled and activated fields to 1.
    - Leave the d_reason field empty.

    You need only do this for one admin user. Then the admin can use the
    admin/add user interface to add more users at appropriate levels.

    Users will receive an email containing a link they need to follow in
    order to complete their account set up, by setting a password.

    Create a directory for serving this, e.g

    # mkdir -p /var/www/receiptomatic/{static/css,templates}

    # cp receiptomatic-www /var/www/receiptomatic/
    # cp static/css/main.css /var/www/receiptomatic/static/css/
    # cp templates/* /var/www/receiptomatic/templates/

    Copy the email receiver into /etc/smrsh

    # cp receiver/receiptomatic /etc/smrsh/
    # chown mail:mail /etc/smrsh/receiptomatic
    # chmod 750 /etc/smrsh/receiptomatic

    Create the directory for the receipt uploads, e.g

    # mkdir -p /data/www/receiptomatic/receipt_images

    - receiver/receiptomatic will need to be able to create directories and
      files in there.
    - www/receiptomatic-www will need to be able to access the files in there.

    Receipt images will be stored under [tenant/]UID/YYYY/MM/DD, under the
    directory you created above.

    Create an email alias for this, this is the email address that users will
    send their images to.

    # echo -e "receipts:\t|/etc/smrsh/receiptomatic" >> /etc/aliases
    # newaliases

    I'm currently using Apache to handle the initial requests and to serve
    static content. Requests to the application go via nginx. There are config
    snippets for these in the docs/ directory.


Configuration
=============

    The application (receiver/receiptomatic and www/receiptomatic-www) needs
    some basic configuration.

    There is an example configuration file in the config/ directory which
    contains a minimal set of needed config options.

    To see the full list of config options, look at docs/config.txt


    The recieptomatic.cfg file should then be placed into either /usr/local/etc
    or /etc, these are where the email receiver looks for it.


Multi-tenancy
=============

    receiptomatic can be run in a multi-tenancy mode. This means a single
    _instance_ of the application can handle mutiple different organisations
    each with a number of users.

    Setting things up as above, will get you up and running in the traditional
    non multi-tenancy mode.

    The email receiver will simply look at the From: address to work out what
    to do and it doesn't really matter what address was used to send the
    receipt image to.

    In multi-tenancy mode however, the From: address alone isn't enough. We
    also need something to work out what organisation that user belongs to.

    In this case we use the To: address. Thus in this mode of operation,
    users should use addresses like receipts@<tenant>.domain when sending
    their receipts. e.g receipts@otl.ri.opentechlabs.net, where otl is their
    organisational name.

    Likewise for the website side of things, in multi-tenancy mode, users need
    to use url's like <tenant>.domain, e.g
    https://otl.ri.opentechlabs.net/login/ to access their site as this tells
    the application what database it should use for each user. The databases
    should be named rm_<tenant> so for this user/organisation it would be
    rm_otl and any database name specified in the config file will be
    ignored.

    Perhaps the easiest way to accomplish this is through the use of wildcard
    DNS entries. e.g

	*.ri.opentechlabs.net.	IN	A	192.168.1.129
	*.ri.opentechlabs.net.	IN	MX 10	ri.opentechlabs.net.

   some care does need to be taken with such a setup, but a full discussion
   is beyond the scope of this document.

   On the database side of things, a single user should be used for all the
   databases. Also in this mode, the database user should have the GRANT
   privilege, so that it gets the 'unknown database' error rather than an
   access denied error. The 'unknown database' error is used by the
   application to send the user to a page telling them they have likely
   mistyped the hostname.

  Naming
  As the database and hostnames are essentially the same, there are some
  restrictions on the names we can use. Names should consist only of the
  following characters [a-z0-9] and should not begin with a digit.


Run
===

    The application itself is started with the spawn-fcgi command, something
    like

    $ export LD_LIBRARY_PATH=/path/to/libctemplate spawn-fcgi -a 127.0.0.1 -p 9191 -P /tmp/receiptomatic-www.pid -- /path/to/receiptomatic-www /usr/local/etc/receiptomatic.cfg

    The 9191 is the port that the application is listening on, the one that is
    specified in nginx.conf

    I use the runasuser utility (https://github.com/ac000/runasuser) to start
    the app as a specific user with the following script.

    #!/bin/sh
    #

    RUNASUSER_CHDIR=0 /usr/local/sbin/runasuser rmatic spawn-fcgi -a 127.0.0.1 -p 9191 -P /tmp/receiptomatic-www.pid -- /home/rmatic/receiptomatic-www /usr/local/etc/receiptomatic.cfg

    And set the LD_LIBRARY_PATH in /usr/local/etc/runasuser.env.conf

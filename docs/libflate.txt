libflate AKA Flate AKA FLATE Library is a library for handling HTML templates
in C by Fabien Menemenlis. Although it seems to have been long abandoned by
its author and its website no longer exists, here is the last version from
archive.org (https://web.archive.org/web/20170312075448/http://flate.dead-inside.org/)

I have a copy of the code here (https://github.com/ac000/libflate) to which I
have made some fixes/enhancements.

This document will describe that interface (I have created wrappers around
some of the original Flate functions to keep in with my naming conventions).

The following describes the usage of libflate with regards to receiptomatic.

The functions currently used are (these are aliases for the underlying
libflate functions to provide a consistent naming convention with the
rest of the code)

lf_set_tmpl	- Used to tell Flate which template file to operate on.
lf_set_var	- Used to create a template variable.
lf_set_row	- Used to indicate a row of data in a loop.
lf_free		- Free all memory used by Flate.


Flate *lf_set_tmpl(Flate **tmplte, char *filename)

This takes a pointer to a NULL Flate data structure and the path (relative to
the DOCUMENT_ROOT) to the template to be processed. tmplte is also modified
in place.

void lf_set_var(Flate *tmplte, char *fld, char *val, char *(*fmt)(const char *))

This takes a Flate data structure as initialised by lf_set_tmpl, a template
variable name that will link it to the template file and a string containing
the value for that variable.

This function can also optionally take a format function as its fourth
argument or NULL. If the fourth argument is not NULL then it is the name of
a function that will be called to process the string passed in as val.

This can be useful for things like anti-xss where you want to make safe
strings before sending them to the client. Indeed, there is a de_xss function
for this very purpose.

This format function should have the following prototype

    char *fmt_func(const char *)

it will return a dynamically allocated string, which will be freed by lf_free.

void lf_set_row(Flate *tmplte, char *line)

This takes a previously initialised Flate data structure and a string to
identify it to the template.

This is used to construct rows of variables gathered from a loop to display
for example in a table.

void send_template(Flate *f)

Not part of libflate but somewhat related. This takes the Flate data structure
and calls flatePage() on it to get the processed template into a memory buffer
which is then sent to the client.

void lf_free(Flate *tmplte)

This takes a Flate data structure and free's all its associated memory.


Here's a simple example. NOTE: This is independent of receiptomatic

#include <fcgiapp.h>
#include <flate.h>

#define lf_set_tmpl		flateSetFile
#define lf_set_var		flateSetVar
#define lf_set_row		flateDumpTableLine
#define lf_free			flateFreeMem

#define NR_OS			5

struct os {
	char *name;
	char *used;
};

static struct os oses[NR_OS] = {
	{ "Linux",	"Yes" },
	{ "FreeBSD",	"Yes" },
	{ "Solaris",	"Yes" },
	{ "UP-UX",	"No" },
	{ "True64",	"No" },
};

int main(int argc, char *argv[])
{
	FCGX_Stream *fcgx_in;
	FCGX_Stream *fcgx_out;
	FCGX_Stream *fcgx_err;
	FCGX_ParamArray fcgx_envp;

	while (FCGX_Accept(&fcgx_in, &fcgx_out, &fcgx_err, &fcgx_envp) >= 0) {
		Flate *f = NULL;
		char *buf;
		int i;

		lf_set_tmpl(&f, "page.tmpl");
		for (i = 0; i < NR_OS; i++) {
			lf_set_var(f, "os", oses[i].name, NULL);
			lf_set_var(f, "used", oses[i].used, NULL);
			lf_set_row(f, "oses");
		}

		buf = flatePage(f);
		FCGX_FPrintF(fcgx_out,
			     "Content-Type: text/html\r\n\r\n%s", buf);
		free(buf);
		lf_free(f);
		FCGX_Finish();
	}
}


<html>
<head>
	<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
</head>
<body>

<table>
<!-- #BEGINTABLE oses -->
<tr>
	<td>##os##</td>
	<td>##used##</td>
</tr>
<!-- #ENDTABLE oses -->
</table>

</body>
</html>
